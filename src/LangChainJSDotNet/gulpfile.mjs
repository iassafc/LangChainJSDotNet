import gulp from 'gulp';
import replace from 'gulp-replace';
import browserify from 'browserify';
import source from 'vinyl-source-stream';
import fs from 'fs/promises';
import * as template from './src/template.js';
import { supportedImports, unsupportedImportPrefixes } from './src/consts.js';

export const generateImports = async () => {
  try {
    const keys = await template.getItems();
    const lines = keys.map(key => {
        // only allow imports specifically listed in 'supportedImports'
        // or anything without an unsupported prefix, if above root level
        if ((key.split('/').length > 2 &&
          !unsupportedImportPrefixes.some(prefix => key.startsWith(prefix))) ||
          supportedImports.includes(key)) {
            return template.bodyItem(key);
          } else {
            console.log('Skipping: ' + key);
          } 
    });
    lines.unshift(template.header);
    lines.push(template.footer);
    await fs.writeFile('src/autogen.js', lines.join(''));
  } catch (err) {
    console.error(err);
  }
};

export const createBundle = () => {
    return browserify([
            // simulates browser environment
            'src/browser.js',
            // autogenerated langchainjs imports
            'src/autogen.js'
        ],
        {
            plugin: ['esmify'],
            transform: [['babelify', { global: true }]]
        })
        .bundle()
        .pipe(source('bundle.js'))
        .pipe(gulp.dest('dist'));
}

export const editBundle = () => {
    return gulp.src('dist/bundle.js')
        .pipe(replace(
            // allows injecting environment variables
            'process.env?.[name] : undefined;',
            'globalThis.process.env?.[name] : undefined;'
        ))
        .pipe(gulp.dest('dist'));
};

const allTasks = gulp.series(generateImports, createBundle, editBundle);

export default allTasks;